# This file is only meant to be sourced, not run.
called=$_
if [[ $called != $0 ]] ; then
    echo "${BASH_SOURCE[@]} is being sourced."
else
    this_file=`basename "$0"`
    echo "WARNING: $this_file is being run. It is only meant to be sourced."
fi

# Adapated from https://gist.github.com/shmatov/3508983
#
# Depends on bash_colors.sh, from https://github.com/maxtsepkov/bash_colors

# We'll take care of the prompt ourselves.
export VIRTUAL_ENV_DISABLE_PROMPT=1

function __git_dirty {
    git diff --quiet HEAD &>/dev/null
    [ $? == 1 ] && clr_red "X"
}

# clr_escape echoes, and the only way to capture the output of echo is with a
# subshell. So, there are a lot of subshells.
function __git_branch {
    local git_ps1=$(__git_ps1 "%s")
    if [ ! -z "$git_ps1" ]; then
        clr_escape $(echo "$git_ps1" | sed 's/feature/f/; s/chore/c/; s/bug/b/') $CLR_LIGHT_GRAY
    fi
}

function __my_rvm_ruby_version {
    [ -z "$SHOW_RVM" ] && return

    local gemset=$(echo $GEM_HOME | awk -F'@' '{print $2}')
    [ "$gemset" != "" ] && gemset="@$gemset"
    local version=$(echo $MY_RUBY_HOME | awk -F'-' '{print $2}')
    local full="$version$gemset"
    [ "$SHOW_RVM" != "" ] && [ "$full" != "" ] && clr_red "$full"
}

function __virtualenv {
    [ -z "$VIRTUAL_ENV" ] && return

    local env=$(basename "$VIRTUAL_ENV")
    [ -z "$env" ] || clr_escape "$env" $CLR_LIGHT_BLUE
}

function __node {
    local v
    # If node is available...
    if hash node 2>/dev/null; then
        # ...it might be an alias, because nvm_use has not been run yet. (node
        # is probably available because some helpful package like heroku put it
        # in /usr/local/bin or somewhere else that's on PATH.)
        alias node 2>/dev/null >/dev/null && v="XX"

        # If not an alias, it's good to go.
        alias node 2>/dev/null >/dev/null || v=$(node -v)
    fi
    [ -z "$v" ] || clr_escape "${v:1}" "$CLR_CYAN"
}

function __info {
    local full=(
        $(__my_rvm_ruby_version)
        $(__virtualenv)
        $(__node)
        $(__git_branch)
        # $(__git_dirty)
    )
    # Note: I think this is expanding the array into a string.
    full="${full[*]}"

    # [ "$full" == "" ] && echo "" || echo "$full "
    [ -z "$full" ] || echo "$full "
}

PS1="\$(__info)\w \$ "
BIG_PS1=$PS1
LITTLE_PS1="\$ "

function big_prompt {
    PS1=$BIG_PS1
}

function little_prompt {
    PS1=$LITTLE_PS1
}
